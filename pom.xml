<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.hospital.huskie</groupId>
    <artifactId>huskie-parent</artifactId>
    <version>1.0.0</version>
    <modules>
        <module>common</module>
        <module>service</module>
        <module>mapping</module>
        <module>controller</module>
    </modules>
    <packaging>pom</packaging>
    <name>hospital Hospital registration management system Parent POM</name>
    <url>http://hospital.org/</url>

    <!--项目名称和URL-->
    <issueManagement>
        <!--项目名字，-->
        <system>huskie</system>
        <!--该项目使用的URL-->
        <url>http://huskie.com</url>
    </issueManagement>
    <!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。-->
    <inceptionYear>2018</inceptionYear>


    <properties>
        <springVersion>4.3.12.RELEASE</springVersion>
        <c3p0Version>0.9.1.2</c3p0Version>
        <mysql-connector>5.1.25</mysql-connector>
        <jacksonVersion>2.9.2</jacksonVersion>
        <mybatisVersion>3.2.1</mybatisVersion>
        <mybatis-spring>1.3.0</mybatis-spring>
        <aspectjweaver>1.8.11</aspectjweaver>
        <commons-io>2.4</commons-io>
        <commons-fileupload>1.2.2</commons-fileupload>
        <servlet-api>3.0.1</servlet-api>
        <jsp-api>2.1</jsp-api>
    </properties>

    <dependencies>
        <!--
        compile（默认）：编译范围的依赖，它在编译和打包的时候都会把该依赖打包进去
        test：测试依赖范围，它在编译和打包的时候都不会把该依赖打包进去
        provided：在编译和测试范围有效，最后生成war包时不会打包进去。
        runtime：运行时依赖，编译的时候不依赖。
        system：系统依赖范围
        import：导入依赖范围
         -->


        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.21</version>
        </dependency>

    </dependencies>
    <dependencyManagement>

        <dependencies>
            <!--c3p0  数据连接池 jar-->
            <dependency>
                <groupId>c3p0</groupId>
                <artifactId>c3p0</artifactId>
                <version>${c3p0Version}</version>
            </dependency>

            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql-connector}</version>
            </dependency>

            <!--mybatis jar-->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatisVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis-spring}</version>
            </dependency>

            <dependency>
                <groupId>com.hospital.huskie</groupId>
                <artifactId>common</artifactId>
                <version>1.0.0</version>
            </dependency>


            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-beans</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-expression</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context-support</artifactId>
                <version>${springVersion}</version>
            </dependency>


            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aop</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>${springVersion}</version>
            </dependency>


            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jms</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-messaging</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <!--基于AspectJ的AOP需要引入的jar  jar -->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>${aspectjweaver}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <!--json jar包-->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jacksonVersion}</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jacksonVersion}</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jacksonVersion}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${springVersion}</version>
            </dependency>

            <!--长传图片的包-->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io}</version>
            </dependency>

            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>${commons-fileupload}</version>
            </dependency>


            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${servlet-api}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet.jsp</groupId>
                <artifactId>jsp-api</artifactId>
                <version>${jsp-api}</version>
                <scope>provided</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>

        <pluginManagement>
            <plugins>
                <!--编译器插件有两个目标。它们都已经绑定到Maven生命周期内的适当阶段，因此在它们各自的阶段自动执行。
                compiler:compile 被绑定到编译阶段，并用于编译主源文件。
                compiler:testCompile 绑定到测试编译阶段，用于编译测试源文件。
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.7.0</version>
                    <configuration>
                        <encoding>utf-8</encoding>
                        <!--指定用哪个版本的编译器对java源码进行编译-->
                        <source>1.8</source>
                        <!--指定生成的class文件将保证和哪个版本的虚拟机进行兼容.
                         我们可以通过-target 1.8来保证生成的class文件能在1.2虚拟机上进行运行，
                         但是1.7的虚拟机就不能保证了。-->
                        <target>1.8</target>
                        <!--可以按照下面的示例将初始内存大小设置为128MB，将最大内存使用量设置为512MB 防止编译时堆溢出 -->
                        <!-- <fork>true</fork>
                         <meminitial>128m</meminitial>
                         <maxmem>512m</maxmem>-->
                        <!--不编译测试类-->
                        <!--<skip>true</skip>-->
                    </configuration>

                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.0.0</version>
                    <!--件配置是否传播给子POM-->
                    <configuration>
                        <!--禁止此插件的执行 默认值是false-->
                        <!--<skip>true</skip>-->
                        <!--列出除了默认目录之外，要删除的文件集列表。-->
                        <!--  <filesets>
                              <fileset>
                                  <directory>some/relative/path</directory>
                                  <includes>
                                      <include>**/*.tmp</include>
                                      <include>**/*.log</include>
                                  </includes>
                                  <excludes>
                                      <exclude>**/important.log</exclude>
                                      <exclude>**/another-important.log</exclude>
                                  </excludes>
                                  <followSymlinks>false</followSymlinks>
                              </fileset>
                          </filesets>-->

                        <failOnError>false</failOnError>
                    </configuration>
                    <executions>
                        <execution>
                            <!--指定任务名称（在一个插件中必须唯一）-->
                            <id>auto-clean</id>
                            <!--这里表示绑定的生命周期是initialize-->
                            <phase>initialize</phase>
                            <goals>
                                <!--指定插件目标。-->
                                <goal>clean</goal>
                            </goals>

                        </execution>
                    </executions>
                </plugin>

                <!--使用war打包几种方式的区别
                war:exploded 不会编译java代码成class文件,通常用于在开发阶段通过在指定目录中创建爆炸webapp来加速测试。
                war:war 会编译java代码成class文件
                war:inplace 会编译java代码成class文件,并且在war包中会有源代码
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.2.0</version>
                    <configuration>
                        <!--这个可以配置生成war包的目录默认是在targer目录下-->
                        <!--<webappDirectory>/sample/servlet/container/deploy/directory</webappDirectory>-->
                    </configuration>
                </plugin>

                <!--
                通常，测试Web应用程序涉及编译Java源代码，创建WAR并将其部署到Web容器。
                使用Jetty插件可以跳过最后两个步骤来快速测试您的Web应用程序

                默认情况下，Jetty插件会扫描target/classes以查看Java源代码和src/main/webapp中的任何更改，
                以便更改您的Web源代码

                运行命令  mvn jetty:run
                -->
                <plugin>
                    <groupId>org.mortbay.jetty</groupId>
                    <artifactId>maven-jetty-plugin</artifactId>
                    <version>6.1.10</version>
                    <configuration>
                        <!--十秒扫描一次-->
                        <scanIntervalSeconds>10</scanIntervalSeconds>
                        <connectors>
                            <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                                <!--监听端口-->
                                <port>8080</port>
                                <maxIdleTime>60000</maxIdleTime>
                            </connector>
                        </connectors>
                        <webApp>
                            <contextPath>/huskie</contextPath>
                            <!--静态资源的路径-->
                            <!--<baseResource>src/main/webapp</baseResource>-->
                        </webApp>
                    </configuration>

                </plugin>
                <plugin>
                    <!-- 配置插件 -->
                    <groupId>org.apache.tomcat.maven</groupId>
                    <artifactId>tomcat7-maven-plugin</artifactId>
                    <version>2.2</version>
                    <configuration>
                        <port>8080</port>
                        <path>/</path>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>

</project>